/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"


namespace Taste {


void Parser::SynErr(int n) {
	if (errDist >= minErrDist) errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }
		if (la->kind == _ppOptimize) {
				std::wstring pragma = la->val;
				pragma.erase( std::remove_if( pragma.begin(), pragma.end(), ::isspace ), pragma.end() );
				
				if( wcscmp(L"#optimizeoff", pragma.c_str()) == 0 )
				{
				_is_optimizing = false;
				}
				else if( wcscmp(L"#optimizeon", pragma.c_str()) == 0 )
				{
				_is_optimizing = true;
				}  
				
		}

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::C() {
		_is_optimizing = true; 
		Expect(8 /* "void" */);
		Expect(_ident);
		Expect(_LeftParenthesis);
		Expect(_RightParenthesis);
		Exp* e = 0; 
		Block(e);
		e->optimize(); results = e; 
}

void Parser::Block(Exp*& expression) {
		BlockExpr* expr = new BlockExpr(); 
		Expect(22 /* "{" */);
		while (la->kind == _ident || la->kind == 25 /* ";" */ || la->kind == 26 /* "if" */) {
			Statement(expr);
		}
		Expect(23 /* "}" */);
		expression = expr; 
}

void Parser::Primary(Exp*& expression) {
		LiteralExpr* expr = new LiteralExpr(); expression = expr; bool wasNegative = false; 
		if (la->kind == 9 /* "-" */) {
			Get();
			wasNegative = true; 
		}
		if (la->kind == _realCon) {
			Get();
		} else if (la->kind == _number) {
			Get();
		} else SynErr(28);
		expr->literal = wasNegative ? -_wtof(t->val) :  _wtof(t->val) ; 
}

void Parser::Expr(Exp*& expression) {
		Exp* expr = 0; 
		LogOrExpr(expr);
		expression = expr; 
}

void Parser::LogOrExpr(Exp*& expression) {
		Exp* expr = 0; 
		LogAndExpr(expr);
		while (la->kind == 10 /* "||" */) {
			Get();
			OrExpr* orExpression = new OrExpr(); orExpression->a = expr; expr = 0;  
			LogAndExpr(expr);
			orExpression->b = expr; expr = orExpression; 
		}
		expression = expr; 
}

void Parser::LogAndExpr(Exp*& expression) {
		Exp* expr = 0; 
		CompExpr(expr);
		while (la->kind == 11 /* "&&" */) {
			Get();
			AndExpr* orExpression = new AndExpr(); orExpression->a = expr; expr = 0;  
			CompExpr(expr);
			orExpression->b = expr; expr = orExpression; 
		}
		expression = expr; 
}

void Parser::CompExpr(Exp*& expression) {
		Exp* expr = 0; 
		MultExpr(expr);
		while (StartOf(1)) {
			int op = 0; 
			switch (la->kind) {
			case 12 /* "==" */: {
				Get();
				op = 1; 
				break;
			}
			case 13 /* "!=" */: {
				Get();
				op = 2; 
				break;
			}
			case 14 /* "<=" */: {
				Get();
				op = 3; 
				break;
			}
			case 15 /* ">=" */: {
				Get();
				op = 4; 
				break;
			}
			case 16 /* "<" */: {
				Get();
				op = 5; 
				break;
			}
			case 17 /* ">" */: {
				Get();
				op = 6; 
				break;
			}
			}
			ComparisonExp* orExpression = new ComparisonExp(); orExpression->op = op; orExpression->a = expr; expr = 0;  
			MultExpr(expr);
			orExpression->b = expr; expr = orExpression; 
		}
		expression = expr; 
}

void Parser::MultExpr(Exp*& expression) {
		Exp* expr = 0; 
		AddExpr(expr);
		while (la->kind == 18 /* "*" */ || la->kind == 19 /* "/" */ || la->kind == 20 /* "%" */) {
			int op = 0; 
			if (la->kind == 18 /* "*" */) {
				Get();
				op = 3; 
			} else if (la->kind == 19 /* "/" */) {
				Get();
				op = 4; 
			} else {
				Get();
				op = 5; 
			}
			ArthimeticExp* orExpression = new ArthimeticExp(); orExpression->a = expr; orExpression->op = op; expr = 0;  
			AddExpr(expr);
			orExpression->b = expr; expr = orExpression; 
		}
		expression = expr; 
}

void Parser::AddExpr(Exp*& expression) {
		Exp* expr = 0; 
		UnaryExpr(expr);
		while (la->kind == 9 /* "-" */ || la->kind == 21 /* "+" */) {
			if (la->kind == 21 /* "+" */) {
				Get();
			} else {
				Get();
			}
			int op = *t->val == '+' ? 1 : 2; 
			ArthimeticExp* orExpression = new ArthimeticExp(); orExpression->a = expr; orExpression->op = op; expr = 0;  
			UnaryExpr(expr);
			orExpression->b = expr; expr = orExpression; 
		}
		expression = expr; 
}

void Parser::UnaryExpr(Exp*& expression) {
		if (la->kind == _number || la->kind == _realCon || la->kind == 9 /* "-" */) {
			Primary(expression);
		} else if (la->kind == _LeftParenthesis) {
			Get();
			Exp* e = 0; 
			if (StartOf(2)) {
				Expr(e);
				expression = e; 
			}
			Expect(_RightParenthesis);
		} else if (IsMethodCall()) {
			Exp* e = 0; 
			Call(e);
			expression = e; 
		} else if (la->kind == _ident) {
			IdentExpr* expr = new IdentExpr(); expression = expr; 
			Get();
			expr->value += t->val; 
			while (la->kind == _dot) {
				Get();
				expr->value += t->val; 
				Expect(_ident);
				expr->value += t->val; 
			}
		} else SynErr(29);
}

void Parser::Call(Exp*& expression) {
		CallExpr* exp = new CallExpr(); 
		Expect(_ident);
		exp->functionName = t->val; 
		while (la->kind == _dot) {
			Get();
			Expect(_ident);
		}
		Expect(_LeftParenthesis);
		if (StartOf(2)) {
			Arglist(exp);
		}
		Expect(_RightParenthesis);
		expression = exp; 
}

void Parser::Statement(BlockExpr* expression) {
		if (la->kind == 25 /* ";" */) {
			Get();
		} else if (la->kind == 26 /* "if" */) {
			Condition* cond = new Condition(); Exp *e = 0, *b = 0; 
			Get();
			Expect(_LeftParenthesis);
			if (StartOf(2)) {
				Expr(e);
			}
			Expect(_RightParenthesis);
			Block(b);
			cond->booleanExpression = e; cond->blockExpression = b; expression->statements.push_back( cond ); 
		} else if (IsAssignment()) {
			Exp* e = 0; 
			Assignment(e);
			expression->statements.push_back( e ); 
		} else if (la->kind == _ident) {
			Exp* e = 0; 
			EmbeddedStatement(e);
			expression->statements.push_back( e ); 
		} else SynErr(30);
}

void Parser::Arglist(CallExpr* expression) {
		Exp* e = 0; 
		Expr(e);
		expression->arguments.push_back(e); e = 0; 
		while (la->kind == 24 /* "," */) {
			Get();
			Expr(e);
			expression->arguments.push_back(e); e = 0; 
		}
}

void Parser::Assignment(Exp*& expression) {
		AssignExpr* assign = new AssignExpr(); 
		Expect(_ident);
		assign->value += t->val; 
		while (la->kind == _dot) {
			Get();
			assign->value += t->val; 
			Expect(_ident);
			assign->value += t->val; 
		}
		Expect(_assignment);
		Exp* e = 0; 
		Expr(e);
		assign->exp = e; expression = assign; 
}

void Parser::EmbeddedStatement(Exp*& expression) {
		while (!(la->kind == _EOF || la->kind == _ident)) {SynErr(31); Get();}
		expression = 0; 
		Call(expression);
		while (!(StartOf(3))) {SynErr(32); Get();}
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	C();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	maxT = 27;

	ParserInitCaller<Parser>::CallInit(this);
	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[4][29] = {
		{T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,T,T,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,x,x, x,x,x,x, x,x,x,x, x},
		{x,T,T,T, T,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,T,T,x, x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"ident expected"); break;
			case 2: s = coco_string_create(L"number expected"); break;
			case 3: s = coco_string_create(L"realCon expected"); break;
			case 4: s = coco_string_create(L"LeftParenthesis expected"); break;
			case 5: s = coco_string_create(L"RightParenthesis expected"); break;
			case 6: s = coco_string_create(L"assignment expected"); break;
			case 7: s = coco_string_create(L"dot expected"); break;
			case 8: s = coco_string_create(L"\"void\" expected"); break;
			case 9: s = coco_string_create(L"\"-\" expected"); break;
			case 10: s = coco_string_create(L"\"||\" expected"); break;
			case 11: s = coco_string_create(L"\"&&\" expected"); break;
			case 12: s = coco_string_create(L"\"==\" expected"); break;
			case 13: s = coco_string_create(L"\"!=\" expected"); break;
			case 14: s = coco_string_create(L"\"<=\" expected"); break;
			case 15: s = coco_string_create(L"\">=\" expected"); break;
			case 16: s = coco_string_create(L"\"<\" expected"); break;
			case 17: s = coco_string_create(L"\">\" expected"); break;
			case 18: s = coco_string_create(L"\"*\" expected"); break;
			case 19: s = coco_string_create(L"\"/\" expected"); break;
			case 20: s = coco_string_create(L"\"%\" expected"); break;
			case 21: s = coco_string_create(L"\"+\" expected"); break;
			case 22: s = coco_string_create(L"\"{\" expected"); break;
			case 23: s = coco_string_create(L"\"}\" expected"); break;
			case 24: s = coco_string_create(L"\",\" expected"); break;
			case 25: s = coco_string_create(L"\";\" expected"); break;
			case 26: s = coco_string_create(L"\"if\" expected"); break;
			case 27: s = coco_string_create(L"??? expected"); break;
			case 28: s = coco_string_create(L"invalid Primary"); break;
			case 29: s = coco_string_create(L"invalid UnaryExpr"); break;
			case 30: s = coco_string_create(L"invalid Statement"); break;
			case 31: s = coco_string_create(L"this symbol not expected in EmbeddedStatement"); break;
			case 32: s = coco_string_create(L"this symbol not expected in EmbeddedStatement"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}

} // namespace

